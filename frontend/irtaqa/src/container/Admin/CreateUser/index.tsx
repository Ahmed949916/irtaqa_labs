"use client";

import React, { useState } from "react";
import axios from "axios";
import { Box, Typography, Modal, Paper } from "@mui/material";
import { useRouter } from "next/navigation";

import CustomButton from "@/src/components/common/CustomButton";
import CustomInput from "@/src/components/common/CustomInput";
import PageHead from "@/src/components/common/PageHead";

const CreateUser = () => {
  const router = useRouter();

  // Form fields
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");

  // UI state
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // Modal state & generated password
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [generatedPassword, setGeneratedPassword] = useState("");

  // On form submit
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    try {
      // Example request to your backend
      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_API_URL}/admin/users`,
        { name, phone, password }
      );

      // Store generated password from backend response or the provided one
      const newPassword = response.data?.user?.password || password;
      setGeneratedPassword(newPassword);

      setSuccess("User has been created successfully!");
      setIsModalOpen(true); // Open the modal

      // Reset form
      setName("");
      setPhone("");
      setPassword("");
    } catch (err: any) {
      console.error(err);
      setError(err.response?.data?.message || "An error occurred");
    }
  };

  // Close modal function
  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  // Navigate back to Admin Dashboard
  const handleBack = () => {
    router.push("/admin/");
  };

  return (
    <>
      <PageHead text="Create a new User"/>

      <Box
        sx={{
          // background: "linear-gradient(135deg, #eafaf1 0%, #ffffff 100%)",
          background:"#F8FAFC",
          width: "100%",
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          py: 6,
          px: 2,
        }}
      >
        {/* Form Card */}
        <Paper
          component="form"
          onSubmit={handleSubmit}
          elevation={3}
          sx={{
            width: "90%",
            maxWidth: 500,
            borderRadius: 3,
            p: { xs: 3, sm: 4 },
            display: "flex",
            flexDirection: "column",
            gap: 3,
          }}
        >
          <Typography variant="h6" sx={{ color: "#006241",fontWeight:"600" }}>
            Add a New User
          </Typography>

          {/* Form Inputs */}
          <CustomInput
            label="Full Name"
            name="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <CustomInput
          type="tel"
            label="Phone Number"
            name="phone"
            placeholder="03xxxxxxxxx"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
          />
          <CustomInput
            label="Password (optional if auto-generated by backend)"
            name="password"
            type="text"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />

          {/* Action Buttons */}
          <Box sx={{ display: "flex", gap: 3, justifyContent: "center", flexDirection: "column" }}>
            <CustomButton variant="primary" type="submit" fullWidth>
              Create User
            </CustomButton>
            <CustomButton variant="secondary" onClick={handleBack}>
              Back
            </CustomButton>
          </Box>

          {/* Feedback Messages */}
          {error && (
            <Typography color="error" fontSize="14px">
              {error}
            </Typography>
          )}
          {success && (
            <Typography color="primary" fontSize="14px">
              {success}
            </Typography>
          )}
        </Paper>
      </Box>

      {/* Modal for Generated Password */}
      <Modal open={isModalOpen} onClose={handleCloseModal}>
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 400,
            bgcolor: "white",
            boxShadow: 24,
            borderRadius: 3,
            p: 4,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            gap: 2,
          }}
        >
          <Typography variant="h6" sx={{ fontWeight: 600, color: "#006241" }}>
            User Created Successfully!
          </Typography>

        

          <Typography
            variant="h5"
            sx={{
              fontWeight: 700,
              color: "#D32F2F",
              bgcolor: "#FCE4EC",
              padding: "8px 16px",
              borderRadius: "6px",
            }}
          >
            {generatedPassword}
          </Typography>

          <Typography
            variant="body2"
            color="text.secondary"
            sx={{ fontStyle: "italic", textAlign: "center" }}
          >
             Share password securely with the user.
          </Typography>

          <CustomButton variant="primary" onClick={handleCloseModal}>
            Okay
          </CustomButton>
        </Box>
      </Modal>
    </>
  );
};

export default CreateUser;
